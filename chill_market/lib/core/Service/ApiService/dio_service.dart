import 'dart:io';

import 'package:chill_market/core/Service/LocalStoredToken/auth_local_token.dart';
import 'package:chill_market/core/exceptions/app_exception.dart';
import 'package:dio/dio.dart';
import 'package:dio/io.dart';

class DioService {
  late final Dio _dio;
  final AuthLocalTokenService authLocalTokenService;

  DioService(this.authLocalTokenService) {
    _dio = Dio(
      BaseOptions(
        baseUrl: "https://api.escuelajs.co/api/v1/",
        connectTimeout: const Duration(seconds: 10),
        receiveTimeout: const Duration(seconds: 10),
        headers: {
          'Accept': 'application/json',
          if (Platform.isMacOS) 'Origin': 'http://localhost',
        },
      ),
    );

    if (Platform.isMacOS) {
      (_dio.httpClientAdapter as IOHttpClientAdapter).onHttpClientCreate = (
        HttpClient client,
      ) {
        client.badCertificateCallback =
            (X509Certificate cert, String host, int port) => true;
        return client;
      };
    }

    _dio.interceptors.addAll([
      LogInterceptor(
        // request: false,
        requestHeader: false,
        requestBody: false,
        responseHeader: false,
        responseBody: false,
        error: true,
      ),
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          final token = await authLocalTokenService.getToken();
          if (token != null && token.isNotEmpty) {
            options.headers['Authorization'] = 'Bearer $token';
          }
          return handler.next(options);
        },
        onError: (DioException error, handler) {
          stdout.write('‚ùå –û—à–∏–±–∫–∞: ${error.type}');
          stdout.write('üîó URL: ${error.requestOptions.uri}');
          stdout.write('üì¶ –û—Ç–≤–µ—Ç: ${error.response?.data ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}');

          if (error.type == DioExceptionType.connectionError) {
            stdout.write('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
          }

          return handler.next(error);
        },
      ),
    ]);
  }

  Future<Response> post(String endpoint, dynamic data) async {
    try {
      final response = await _dio.post(endpoint, data: data);
      return response;
    } on DioException catch (e) {
      final statusCode = e.response?.statusCode;

      if (statusCode == 400) {
        throw AppException(error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else if (statusCode == 401) {
        throw AppException(error: '–ù–µ–≤–µ—Ä–Ω—ã–π email/–ø–∞—Ä–æ–ª—å');
      } else if (statusCode == 409) {
        throw AppException(error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      } else if (statusCode == 404) {
        throw AppException(error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else if (e.type == DioExceptionType.connectionError ||
          e.type == DioExceptionType.unknown) {
        throw AppException(error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      } else {
        throw AppException(error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}');
      }
    } catch (e) {
      throw AppException(error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  Future<Response> get(String endpoint) async {
    try {
      final response = await _dio.get(endpoint);
      return response;
    } on DioException catch (e) {
      throw AppException(error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ GET –∑–∞–ø—Ä–æ—Å–µ: ${e.message}');
    }
  }
}
